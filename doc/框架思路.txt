====================================================================================================
文件结构：
|--module_controler:管理所有模块的源代码目录
	|--*.c *.h  Makefile
|--module_xxx:		xxx模块源码目录
	|--*.c *.h  	Makefile
|--includes.h:  	依赖文件的引入
|--Makefile.param:	所有Makefile的公共参数
|--Makefile：		管理需相关的Make指令
	|--哪些模块需要单独生成so（侧面说明哪些模块需要集成到主so中）;
	|--即生成全集so也声称独立so
====================================================================================================
思路：
----------------------------------------------------------------------------------------------------
1、controler启动时，先解析配置文件，按需启动模块
|--启动模块时，都调用对应模块提供的xxx_alloc接口；
|--xxx_alloc接口通过配置文件决定是从集成so中动态加载对应接口 还是 从独立xxx.so中动态加载接口；
	|--这样就能做到按需编译局部业务模块，而不重新编译整个系统，达到快速发布，迭代发布的特点
	|--因为可以局部发布，则可以将更新的影响 和 风险降到最低
|--模块的数据结构类型：链表、连续队列；
|--哪些模块需要过滤掉什么信息；
	|--每个模块占用一个bit位，如果为1则代表过滤，不用下发到对应模块
	|--bit位的个数在完成所有模块的加载后根据模块数生成；
	|--判断哪些模块需要过虑时，首先读取no_concerned里面对应消息中的模块名称，然后再通过名称找
	   到对应的module数据块，然后取出对应模块的ID，在记录命令过滤表中将对应模块对应的bit位置1
----------------------------------------------------------------------------------------------------
2、module:
|--需要提供一个基类共所有模块使用module_base
	|--module_base.h module_base.cpp
	|--基类属性应该包含：
		|--模块名称
		|--模块ID
		|--对模块的描述
		|--私有数据指针void*
		|--私有数据大小
	|--公用方法应该包含：
			|--command_process()：所有下发给module的命令从这里走，只能是给指定模块的命令,如果需要module有回应，使用改接口；
			|--sdk_process():	  外部传递过来的状态，通常是走net/网络/管道，这个只能取里面的消息去同步状态，不能改变里面的
								  数据，因为它还会给其他模块做同步用
			|--config_set():	  外部设置模块配置时调用；
			|--config_get():	  外部获取模块配置时调用；
			|--init():		  controler调用这个接口完成模块的所有初始化工作；
			|--uninit():		  controler调用这个接口完成模块的反初始化工作；
	|--提供注册子类(module)的接口；
		|--将module关联到tree/链表/数组
	|--提供反注册子类(module)的接口；
		|--将module从tree/链表/数组剔除
	|--提供关联所有子类的数据结构：tree/链表/数组；
	|--提供从tree/链表/数组获取指定module的接口
3、Makefile调用逻辑：
|--Makefile.param存放所有Makefile公用的参数；
|--每个子目录都包含一个相同的Makefile，只用将所有源文件来生成*.o文件
|--根目录下编写一个循环进入各目录执行Make指令的shell脚本；
|--根目录下编写一个循环进入各目录删除所有*.o文件的shell脚本；
|--根目录下编写一个循环进入各目录删除所有*.d文件的shell脚本；
|--根目录下编写一个循环进入各目录删除所有*.d  *.o文件的shell脚本；
|--根目录下包含一个总入口的Makefile：生成目标文件，删除*.o  *.d   *.o和*.d文件
====================================================================================================
用到的表：
----------------------------------------------------------------------------------------------------
1、模块ID表：表中的ID用来快速索引到对应的模块data；
----------------------------------------------------------------------------------------------------
2、过滤信息的表：用来快速知道那些命令哪些模块是不需要关注的，所以无需进一步传递；
----------------------------------------------------------------------------------------------------
3、所有模块的命令ID表；
----------------------------------------------------------------------------------------------------
4、所有模块状态消息ID表
----------------------------------------------------------------------------------------------------
5、所有模块的配置ID表
====================================================================================================
需要攻克的问题：
1、Makefile中能不能使用递归查找某个目录下的同类型文件














